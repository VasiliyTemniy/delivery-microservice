syntax = "proto3";

package com.vasiliytemniy.grpc.deliverymeta.service;


service DeliveryMetaService {
  rpc calculateDeliveryMeta (CalculateDeliveryMetaRequest) returns (CalculateDeliveryMetaResponse);
}

message DeliveryMetaData {
  optional int32 cost = 1;
  optional int64 estimatedDeliveryMs = 2;
}

// Currency is not needed here - cost calculation is abstract for given costs
message DeliveryCostParams {
  repeated string calculationType = 1; // "fixed", "distance", "mass", "volume"
  optional int32 fixedCostAddon = 3;
  optional int32 distanceStepCost = 4;
  optional int32 distanceStepQuantity = 5;
  optional string distanceStepMeasure = 6;
  optional int32 massStepCost = 7;
  optional int32 massStepQuantity = 8;
  optional string massStepMeasure = 9;
  optional int32 volumeStepCost = 10;
  optional int32 volumeStepQuantity = 11;
  optional string volumeStepMeasure = 12;
  optional int32 mass = 13;
  optional int32 volume = 14;
}

// Params for estimated delivery time calculation
message DeliveryTimeParams {
  string deliveryVehicleType = 1; // "car", "truck", "plane", "train", "ship", "bicycle"
  int64 estimatedDispatchTimeDeltaMs = 2; // sort, prepare, load, etc
  int64 estimatedDestinationTimeDeltaMs = 3; // unload, prepare, sort, etc
  bool useExternalTimeEstimation = 4;
  optional int32 estimatedVehicleMedianSpeedKmH = 5;
}


// Requests

message CalculateDeliveryMetaRequest {
  string metaCalculationType = 1; // "onlyCost", "onlyEstimatedTime", "costAndEstimatedTime"
  optional string fromAddress = 2;
  optional string toAddress = 3;
  optional DeliveryCostParams deliveryCostParams = 4;
  optional DeliveryTimeParams deliveryTimeParams = 5;
}


// Responses

message CalculateDeliveryMetaResponse {
  string error = 1; // go-style error as value
  DeliveryMetaData deliveryMeta = 2;
}